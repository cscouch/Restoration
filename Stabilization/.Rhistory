#sm<-read.csv("C:/Users/Courtney.S.Couch/Documents/GitHub/fish-paste/data/SURVEY MASTER.csv")
sm<-read.csv("C:/Users/Courtney.S.Couch/Documents/GitHub/Benthic-Scripts/Survey Master Prep/SURVEY_MASTER.csv")
sm<-read.csv("C:/Users/Courtney.S.Couch/Documents/GitHub/fish-paste/data/SURVEY MASTER.csv")
sectors<-read.csv("C:/Users/Courtney.S.Couch/Documents/GitHub/fish-paste/data/Sectors-Strata-Areas.csv")
#Temporary work around for merging in 2014-2017 NWHI data that hasn't been uploaded to Oracle yet- remove this once Michael has incorporated data
new.nw<-read.csv("T:/Benthic/Data/REA Coral Demography & Cover/Raw Data from CoralNet/2014-2017_NWHI_CnetAnnotations_formatted.csv")
new.nw<-new.nw %>% drop_na(ROUNDID) #remove blank rows
new.cnet<-new.nw
class(new.cnet$DATE_)
class(new.cnet$DATE_TAKEN)
#Date conversations still not working
new.cnet$DATE_<-lubridate::mdy(new.cnet$DATE_)
new.cnet$DATE_TAKEN<-lubridate::ymd(new.cnet$DATE_TAKEN);head(new.cnet$DATE_TAKEN)
new.cnet$DATE_ANNOTATED<-lubridate::ymd_hms(new.cnet$DATE_ANNOTATED);head(new.cnet$DATE_ANNOTATED)
#########PLACEHOLDER Temporary work around for merging in 2023 SWAINS data
new.nw<-read.csv("T:/Benthic/Data/REA Coral Demography & Cover/Raw Data from CoralNet/2014-2017_NWHI_CnetAnnotations_formatted.csv")
new.nw<-new.nw %>% drop_na(ROUNDID) #remove blank rows
new.cnet<-new.nw
class(new.cnet$DATE_)
class(new.cnet$DATE_TAKEN)
#Date conversations still not working
new.cnet$DATE_<-lubridate::mdy(new.cnet$DATE_)
new.cnet$DATE_TAKEN<-lubridate::ymd(new.cnet$DATE_TAKEN);head(new.cnet$DATE_TAKEN)
new.cnet$DATE_ANNOTATED<-lubridate::ymd_hms(new.cnet$DATE_ANNOTATED);head(new.cnet$DATE_ANNOTATED)
#combine old cnet and 2015 & 2017 nwhi cnet data
cnet<-rbind(cnet,new.cnet)
10*25
1000/250
300/30
25*30
#CREATE ADULT CLEAN ANALYSIS READY DATA----------------------------------------
# This script will clean the raw benthic REA data using method E that comes directly from the new data base application.
#Note- these data represent the revised data structure instituted in November 2018 and 2019. Several recent dead and condition columns were added
#These data only include surveys conducted between 2013-2020
#NOTE: Depth should not be used the in the raw data because the column was deprecated in Oracale and is inconsistent.
#Use depth data from SURVEY MASTER
rm(list=ls())
#Set Run Flags
DEBUG=TRUE
#LOAD LIBRARY FUNCTIONS ...
source("./Functions/Benthic_Functions_newApp_vTAOfork.R")
963.13-62.74
#Script summarizes wild colonies on experimental and reference site
rm(list=ls())
dir = Sys.info()[7]
setwd(paste0("C:/Users/", dir, "/Documents/GitHub/Restoration/Stabilization/"))
lu<-read.csv("T:/Benthic/Data/Lookup Tables/Genus_lookup.csv")
library(dplyr)
library(ggplot2)
library(ggridges)
#LOAD DATA
colony<-read.csv("Stablization_Colony_T0-6monthPO.csv")
setwd(paste0("C:/Users/", dir, "/Documents/GitHub/Restoration/Stabilization/"))
dir()
#Script summarizes wild colonies on experimental and reference site
rm(list=ls())
dir = Sys.info()[7]
setwd(paste0("C:/Users/", dir, "/Documents/GitHub/Restoration/Stabilization/"))
lu<-read.csv("T:/Benthic/Data/Lookup Tables/Genus_lookup.csv")
library(dplyr)
library(ggplot2)
library(ggridges)
#LOAD DATA
colony<-read.csv("data/Stablization_Colony_T0-6monthPO.csv")
colony<- colony %>%
rename(SPCODE=Species) %>%
#mutate(Survey_Period = recode(Survey_Period, T0_Post_Installation = 'T0', Baseline = 'Baseline', T1_6months =  'T1 (6months)'))%>%
left_join(lu)
levels(as.factor(colony$Survey_Period))
table(colony$Survey_Period,colony$Treatment)
tmp<- subset(colony,Treatment=="Reference" & Survey_Period=="T1_6mo_preoutplant")
table(tmp$Plot_ID)
tmp2<- subset(colony,Treatment=="Reference" & Survey_Period=="T1_6mo_postoutplant")
table(tmp2$Plot_ID)
# Use baseline control data for post-installation control
pi.c<-colony %>% filter((Survey_Period=="Baseline") & (Treatment=="Control"))
pi.c$Survey_Period <-"T0_Post_Installation"
# Use preoutplant control data for postoutplant control
t1pre.c<-colony %>% filter((Survey_Period=="T1_6mo_preoutplant") & (Treatment=="Control"))
t1pre.c$Survey_Period <-"T1_6mo_postoutplant"
#Combine into dataframe
colony.new<-rbind(pi.c,t1pre.c,colony)
table(colony.new$Survey_Period,colony.new$Treatment)
#Remove reference site data and calculate abudance/plot
col.tot<-as.data.frame(colony.new %>%
filter(Treatment!="Reference")   %>%
group_by(Survey_Period, Treatment,Plot_ID) %>%
summarise(n = n()))
View(col.tot)
#Save file for Nyssa to use for Bayasian analysis- remove reference site and post outplant data
for.nyssa<-as.data.frame(colony.new %>%
filter(Treatment!="Reference")   %>%
filter(Survey_Period!="T1_6mo_postoutplant")   %>%
group_by(Survey_Period, Treatment,Plot_ID) %>%
summarise(n = n()))
#save file
write.csv(for.nyssa,file="data/WildColony_byPlot_forNyssa.csv",col.names = F)
?write.csv
#save file
write.csv(for.nyssa,file="data/WildColony_byPlot_forNyssa.csv",col.names = FALSE)
#save file
write.csv(for.nyssa,file="data/WildColony_byPlot_forNyssa.csv",row.names = FALSE)
levels(as.factor(colony$Survey_Period))
as.data.frame(colony.new %>%
filter(Treatment!="Reference")   %>%
filter(Survey_Period!="T1_6mo_postoutplant")   %>%
group_by(Survey_Period, Treatment,Plot_ID) %>%
summarise(n = n()))
for.nyssa<-as.data.frame(colony.new %>%
filter(Treatment!="Reference")   %>%
filter(Survey_Period!="T1_6mo_postoutplant")   %>%
group_by(Survey_Period, Treatment,Plot_ID) %>%
summarise(colony_abun = n()))
#save file
write.csv(for.nyssa,file="data/WildColony_byPlot_forNyssa.csv",row.names = FALSE)
for.nyssa<-as.data.frame(colony.new %>%
filter(Treatment!="Reference")   %>%
filter(Survey_Period!="T1_6mo_postoutplant")   %>%
group_by(Survey_Period, Treatment,Plot_ID) %>%
summarise(colony_abun = n()))
#save file
write.csv(for.nyssa,file="data/WildColony_byPlot_forNyssa.csv",row.names = FALSE)
rm(list=ls())
dir = Sys.info()[7]
setwd(paste0("C:/Users/", dir, "/Documents/GitHub/Restoration/Stabilization/"))
library(dplyr)
library(ggplot2)
library(ggridges)
#LOAD DATA
urchin<-read.csv("data/Stablization_Urchins_T0-6monthPO.csv")
# urchin<- urchin %>%
#   rename(SPCODE=Species) %>%
#   #mutate(Survey_Period = recode(Survey_Period, T0_Post_Installation = 'T0', Baseline = 'Baseline', T1_6months =  'T1 (6months)'))%>%
#   left_join(lu)
levels(as.factor(urchin$Survey_Period))
levels(as.factor(urchin$Plot_ID))
table(urchin$Survey_Period,urchin$Treatment)
tmp<- subset(urchin,Treatment=="Reference" & Survey_Period=="T1_6mo_preoutplant")
table(tmp$Plot_ID)
tmp2<- subset(urchin,Treatment=="Reference" & Survey_Period=="T1_6mo_postoutplant")
table(tmp2$Plot_ID)
# Use baseline control data for post-installation control
pi.c<-urchin %>% filter((Survey_Period=="Baseline") & (Treatment=="Control"))
pi.c$Survey_Period <-"T0_Post_Installation"
# Use preoutplant control data for postoutplant control
t1pre.c<-urchin %>% filter((Survey_Period=="T1_6mo_preoutplant") & (Treatment=="Control"))
t1pre.c$Survey_Period <-"T1_6mo_postoutplant"
#Combine into dataframe
urchin.new<-rbind(pi.c,t1pre.c,urchin)
table(urchin.new$Survey_Period,urchin.new$Treatment)
#Remove reference site data and calculate abudance/plot
col.tot<-as.data.frame(urchin.new %>%
#filter(Treatment!="Reference")   %>%
group_by(Survey_Period, Treatment,Plot_ID) %>%
summarise(n = n()))
View(col.tot)
#Save file for Nyssa to use for Bayasian analysis- remove reference site and post outplant data
for.nyssa<-as.data.frame(urchin.new %>%
filter(Treatment!="Reference")   %>%
filter(Survey_Period!="T1_6mo_postoutplant")   %>%
group_by(Survey_Period, Treatment,Plot_ID) %>%
summarise(urchin_abun = n()))
#save file
write.csv(for.nyssa,file="data for Nyssa/Urchins_byPlot_forNyssa.csv",row.names = FALSE)
#Script summarizes wild colonies on experimental and reference site
rm(list=ls())
dir = Sys.info()[7]
setwd(paste0("C:/Users/", dir, "/Documents/GitHub/Restoration/Stabilization/"))
lu<-read.csv("T:/Benthic/Data/Lookup Tables/Genus_lookup.csv")
library(dplyr)
library(ggplot2)
library(ggridges)
#LOAD DATA
colony<-read.csv("data/Stablization_Colony_T0-6monthPO.csv")
colony<- colony %>%
rename(SPCODE=Species) %>%
#mutate(Survey_Period = recode(Survey_Period, T0_Post_Installation = 'T0', Baseline = 'Baseline', T1_6months =  'T1 (6months)'))%>%
left_join(lu)
levels(as.factor(colony$Survey_Period))
table(colony$Survey_Period,colony$Treatment)
tmp<- subset(colony,Treatment=="Reference" & Survey_Period=="T1_6mo_preoutplant")
table(tmp$Plot_ID)
tmp2<- subset(colony,Treatment=="Reference" & Survey_Period=="T1_6mo_postoutplant")
table(tmp2$Plot_ID)
# Use baseline control data for post-installation control
pi.c<-colony %>% filter((Survey_Period=="Baseline") & (Treatment=="Control"))
pi.c$Survey_Period <-"T0_Post_Installation"
# Use preoutplant control data for postoutplant control
t1pre.c<-colony %>% filter((Survey_Period=="T1_6mo_preoutplant") & (Treatment=="Control"))
t1pre.c$Survey_Period <-"T1_6mo_postoutplant"
#Combine into dataframe
colony.new<-rbind(pi.c,t1pre.c,colony)
table(colony.new$Survey_Period,colony.new$Treatment)
#Remove reference site data and calculate abudance/plot
col.tot<-as.data.frame(colony.new %>%
filter(Treatment!="Reference")   %>%
group_by(Survey_Period, Treatment,Plot_ID) %>%
summarise(n = n()))
View(col.tot)
#Save file for Nyssa to use for Bayasian analysis- remove reference site and post outplant data
for.nyssa<-as.data.frame(colony.new %>%
filter(Treatment!="Reference")   %>%
filter(Survey_Period!="T1_6mo_postoutplant")   %>%
group_by(Survey_Period, Treatment,Plot_ID) %>%
summarise(colony_abun = n()))
#save file
write.csv(for.nyssa,file="data/WildColony_byPlot_forNyssa.csv",row.names = FALSE)
#Stats
# library(car)
#
# col.tot$sqrt_abun<-sqrt(col.tot$n)
# mod <- aov(sqrt_abun ~ Survey_Period * Treatment, data = col.tot)
# plot(mod, which = 2)
# qqPlot(mod$residuals,id = FALSE)
# hist(mod$residuals)
# leveneTest(mod)
#
# mod <- aov(sqrt_abun ~ Survey_Period * Treatment, data = col.tot)
#
# library(lme4)
# mod1<-glmer(n~Survey_Period * Treatment+(1|Plot_ID), family="poisson",data=col.tot)
# nullmod<-glmer(n~Survey_Period * Treatment+(1|Plot_ID), family="poisson",data=col.tot)
# anova(mod1,nullmod)
#
# mod1<-glmer(n~Survey_Period * Treatment+(1|Plot_ID), family="poisson",data=col.tot)
# mod2<-glmer(n~Survey_Period+(1|Plot_ID), family="poisson",data=col.tot)
# anova(mod1,mod2)
#
# mod1<-glmer(n~Survey_Period * Treatment+(1|Plot_ID), family="poisson",data=col.tot)
# mod3<-glmer(n~Treatment+(1|Plot_ID), family="poisson",data=col.tot)
# anova(mod1,mod3)
#
# col.tot<-subset(col.tot, Treatment=="Boulder")
# mod1<-glmer(n~Survey_Period +(1|Plot_ID), family="poisson",data=col.tot)
#
# library(emmeans)
# emmeans(mod1, list(pairwise ~ Survey_Period), adjust = "tukey")
#
#
# 1-logLik(mod1)/logLik(nullmod) # Calculate McFadden's R2 =0.3081
col.tot$Treatment <- factor(col.tot$Treatment, levels = c("Control", "Mesh", "Boulder"))
col.tot$Survey_Period <- factor(col.tot$Survey_Period, levels = c("Baseline","T0_Post_Installation","T1_6mo_preoutplant","T1_6mo_postoutplant"))
ggplot(col.tot,aes(Treatment,n))+
geom_boxplot(aes(fill=Survey_Period))+
#geom_jitter(width = 0.2, height = 0, size = 1, alpha = 0.8)
labs(x = "Treatment", y = "Colony Abundance")+
theme_minimal() +
theme(
axis.text = element_text(size = 12),
axis.title = element_text(size = 14, face = "bold"),
legend.title = element_blank()  )
###By Genus
col.gen<-as.data.frame(colony3 %>%
group_by(Survey_Period, Treatment,Plot_ID,GENUS_CODE) %>%
summarise(n = n()))
col.gen<-as.data.frame(colony.new %>%
filter(Treatment!="Reference")   %>%
filter(Survey_Period!="T1_6mo_postoutplant")   %>%
group_by(Survey_Period, Treatment,Plot_ID,GENUS_CODE) %>%
summarise(n = n()))
View(col.gen)
col.gen$Treatment <- factor(col.gen$Treatment, levels = c("Control", "Mesh", "Boulder"))
ggplot(col.gen,aes(Survey_Period,n, fill=GENUS_CODE))+
geom_bar(position="stack", stat="identity")+
facet_wrap(~Treatment)+
labs(x = "Treatment", y = "Colony Abundance")+
#theme_minimal() +
theme(
axis.text = element_text(size = 12),
axis.title = element_text(size = 14, face = "bold"),
legend.title = element_blank()  )
head(col.gen)
View(col.gen)
View(subset(col.gen,Survey_Period!="Baseline"))
# Reshape the data to wide format: one column per survey period
col.gen.wide <- col.gen %>%
pivot_wider(names_from = Survey_Period, values_from = n)
library(dplyr)
col.gen.wide <- col.gen %>%
pivot_wider(names_from = Survey_Period, values_from = n)
library(tidyr)
col.gen.wide <- col.gen %>%
pivot_wider(names_from = Survey_Period, values_from = n)
View(col.gen.wide)
col.gen %>%
filter(Survey_Period!="Baseline")   %>%
pivot_wider(names_from = Survey_Period, values_from = n)
perc.change <- col.gen.wide %>%
mutate(
Percent_Change = 100 * ((`T1_6mo_preoutplant` - `T0_Post_Installation`) / `T0_Post_Installation`))
perc.change
perc.change <- col.gen.wide %>%
mutate(
Percent_Change = 100 * ((`T1_6mo_preoutplant` - `T0_Post_Installation`) / `T0_Post_Installation`))%>%
drop_na()
col.gen.wide %>%
mutate(
Percent_Change = 100 * ((`T1_6mo_preoutplant` - `T0_Post_Installation`) / `T0_Post_Installation`))%>%
drop_na()
View(perc.change)
ggplot(perc.change,aes(GENUS_CODE,Percent_Change))+
geom_boxplot(aes(fill=GENUS_CODE))+
facet_wrap(~Treatment)+
labs(x = "Treatment", y = "Colony Abundance")+
theme_minimal() +
theme(
axis.text = element_text(size = 12),
axis.title = element_text(size = 14, face = "bold"),
legend.title = element_blank()  )
ggplot(col.gen,aes(Survey_Period,n, fill=GENUS_CODE))+
geom_bar(position="stack", stat="identity")+
facet_wrap(~Treatment)+
labs(x = "Genus", y = "% Change in Abundance")+
theme_bw() +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14, face = "bold"),
legend.title = element_blank(),
legend.position = "none")
ggplot(perc.change,aes(GENUS_CODE,Percent_Change))+
geom_boxplot(aes(fill=GENUS_CODE))+
facet_wrap(~Treatment)+
labs(x = "Genus", y = "% Change in Abundance")+
theme_bw() +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14, face = "bold"),
legend.title = element_blank(),
legend.position = "none")
head(colony)
head(colony.new)
col.gen<-as.data.frame(colony.new %>%
filter(Treatment!="Reference")   %>%
filter(Survey_Period!="T1_6mo_postoutplant")   %>%
group_by(Survey_Period, Treatment,Plot_ID,GENUS_CODE,TAXONNAME) %>%
summarise(n = n()))
View(col.gen)
# Reshape the data to wide format: one column per survey period- filter just boulder piles
col.gen.wide <- col.gen %>%
filter(Treatment!="Boulder")   %>%
filter(Survey_Period!="Baseline")   %>%
pivot_wider(names_from = Survey_Period, values_from = n)
# Step 3: Calculate percent change between the two survey periods
perc.change <- col.gen.wide %>%
mutate(
Percent_Change = 100 * ((`T1_6mo_preoutplant` - `T0_Post_Installation`) / `T0_Post_Installation`))%>%
drop_na()%>%
#Plot percent change
ggplot(perc.change,aes(TAXONNAME,Percent_Change))+
geom_boxplot(aes(fill=GENUS_CODE))+
facet_wrap(~Treatment)+
labs(x = "Genus", y = "% Change in Abundance")+
theme_bw() +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14, face = "bold"),
legend.title = element_blank(),
legend.position = "none")
head(perc.change)
View(col.gen)
# Reshape the data to wide format: one column per survey period- filter just boulder piles
col.gen.wide <- col.gen %>%
filter(Treatment!="Boulder")   %>%
filter(Survey_Period!="Baseline")   %>%
pivot_wider(names_from = Survey_Period, values_from = n)
head(col.gen.wide)
perc.change <- col.gen.wide %>%
mutate(
Percent_Change = 100 * ((`T1_6mo_preoutplant` - `T0_Post_Installation`) / `T0_Post_Installation`))%>%
drop_na()%>%
head(perc.change)
col.gen.wide <- col.gen %>%
filter(Treatment!="Boulder")   %>%
filter(Survey_Period!="Baseline")   %>%
select(-GENUS_CODE)%>%
pivot_wider(names_from = Survey_Period, values_from = n)
head(col.gen.wide)
col.gen.wide <- col.gen %>%
filter(Treatment =="Boulder")   %>%
filter(Survey_Period!="Baseline")   %>%
select(-GENUS_CODE)%>%
pivot_wider(names_from = Survey_Period, values_from = n)
col.gen.wide
View(colony.new)
# Reshape the data to wide format: one column per survey period- filter just boulder piles
col.gen.wide <- col.gen %>%
filter(Treatment =="Boulder")   %>%
filter(Survey_Period!="Baseline")   %>%
mutate(Genus = recode(GENUS_CODE, MOSP = 'Montipora', POCS = 'Pocillopora', POSP =  'Porites'))%>%
pivot_wider(names_from = Survey_Period, values_from = n)
View(col.gen.wide)
col.gen<-as.data.frame(colony.new %>%
filter(Treatment!="Reference")   %>%
filter(Survey_Period!="T1_6mo_postoutplant")   %>%
group_by(Survey_Period, Treatment,Plot_ID,GENUS_CODE) %>%
summarise(n = n()))
View(col.gen)
col.gen %>%
filter(Treatment =="Boulder")   %>%
filter(Survey_Period!="Baseline")   %>%
mutate(Genus = recode(GENUS_CODE, MOSP = 'Montipora', POCS = 'Pocillopora', POSP =  'Porites'))%>%
pivot_wider(names_from = Survey_Period, values_from = n)
col.gen.wide <- col.gen %>%
filter(Treatment =="Boulder")   %>%
filter(Survey_Period!="Baseline")   %>%
mutate(Genus = recode(GENUS_CODE, MOSP = 'Montipora', POCS = 'Pocillopora', POSP =  'Porites'))%>%
pivot_wider(names_from = Survey_Period, values_from = n)
# Step 3: Calculate percent change between the two survey periods
perc.change <- col.gen.wide %>%
mutate(
Percent_Change = 100 * ((`T1_6mo_preoutplant` - `T0_Post_Installation`) / `T0_Post_Installation`))%>%
drop_na()%>%
#Plot percent change
ggplot(perc.change,aes(Genus,Percent_Change))+
geom_boxplot(aes(fill=Genus))+
facet_wrap(~Treatment)+
labs(x = "Genus", y = "% Change in Abundance")+
theme_bw() +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14, face = "bold"),
legend.title = element_blank(),
legend.position = "none")
# Step 3: Calculate percent change between the two survey periods
perc.change <- col.gen.wide %>%
mutate(
Percent_Change = 100 * ((`T1_6mo_preoutplant` - `T0_Post_Installation`) / `T0_Post_Installation`))%>%
drop_na()%>%
perc.change
col.gen.wide <- col.gen %>%
filter(Treatment =="Boulder")   %>%
filter(Survey_Period!="Baseline")   %>%
mutate(Genus = recode(GENUS_CODE, MOSP = 'Montipora', POCS = 'Pocillopora', POSP =  'Porites'))%>%
pivot_wider(names_from = Survey_Period, values_from = n)
col.gen.wide
col.gen.wide %>%
mutate(
Percent_Change = 100 * ((`T1_6mo_preoutplant` - `T0_Post_Installation`) / `T0_Post_Installation`))
View(col.gen.wide)
perc.change <- col.gen.wide %>%
mutate(
Percent_Change = 100 * ((`T1_6mo_preoutplant` - `T0_Post_Installation`) / `T0_Post_Installation`))%>%
filter(Genus %in% c("Montipora","Pocillopora","Porites"))
perc.change
ggplot(perc.change,aes(Genus,Percent_Change))+
geom_boxplot(aes(fill=Genus))+
labs(x = "Genus", y = "% Change in Abundance")+
theme_bw() +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14, face = "bold"),
legend.title = element_blank(),
legend.position = "none")
ggplot(perc.change,aes(Genus,Percent_Change))+
geom_boxplot()+
labs(x = "Genus", y = "% Change in Abundance")+
theme_bw() +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14, face = "bold"),
legend.title = element_blank(),
legend.position = "none")
ggplot(perc.change,aes(Genus,Percent_Change))+
geom_boxplot(color = "grey")+
labs(x = "Genus", y = "% Change in Abundance")+
theme_bw() +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14, face = "bold"),
legend.title = element_blank(),
legend.position = "none")
ggplot(perc.change,aes(Genus,Percent_Change))+
geom_boxplot(fill = "grey")+
labs(x = "Genus", y = "% Change in Abundance")+
theme_bw() +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14, face = "bold"),
legend.title = element_blank(),
legend.position = "none")
